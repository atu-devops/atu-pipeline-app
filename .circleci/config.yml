version: 2.1

orbs:
  ruby: circleci/ruby@1.1.2

jobs:
  automated_tests:
    docker:
      - image: cimg/ruby:3.2.0
    steps:
      - checkout
      - ruby/install-deps
      - run: bundle exec rspec

  code_analysis:
    docker:
      - image: cimg/ruby:3.2.0
    steps:
      - checkout
      - ruby/install-deps
      - run: bundle exec rubocop
      - run: bundle exec brakeman
      # - run: bundle exec rake traceroute
      - run: bundle exec bundle-audit check --update
      - run: bundle exec rails_best_practices

  deploy_staging:
    docker:
      - image: cimg/ruby:3.2.0
    steps:
      - checkout
      - ruby/install-deps
      - run:
          name: Deploy to Heroku Staging
          command: |
            git push https://heroku:${HEROKU_API_KEY}@git.heroku.com/atu-pipeline-staging.git $CIRCLE_BRANCH:main

  capybara_tests:
    docker:
      - image: cimg/ruby:3.2.0-browsers
    steps:
      - checkout
      - ruby/install-deps
      - run:
          name: Run Capybara Tests
          command: |
            export BASE_URL=https://atu-pipeline-staging.herokuapp.com
            bundle exec rspec spec/features          

  hold_for_approval:
    docker:
      - image: cimg/ruby:3.2.0
    steps:
      - run:
          name: Manual Approval Required
          command: echo "Manual approval required to merge develop into main."

  create_pull_request:
    docker:
      - image: cimg/ruby:3.2.0
    steps:
      - checkout
      - ruby/install-deps
      - run:
          name: Create Pull Request on GitHub
          command: |
            PR_TITLE="Automated PR to Merge Develop into Main"
            PR_BODY="This PR is created automatically by the CI pipeline, from ${BRANCH_NAME}"
            PR_HEAD="${CIRCLE_BRANCH}"
            PR_BASE="main"

            curl -X POST -H "Authorization: token ${GITHUB_TOKEN}" \
              -H "Content-Type: application/json" \
              -d "{\"title\": \"${PR_TITLE}\", \"body\": \"${PR_BODY}\", \"head\": \"${PR_HEAD}\", \"base\": \"${PR_BASE}\"}" \
              https://api.github.com/repos/atu-devops/atu-pipeline-app/pulls

  deploy_production:
    docker:
      - image: cimg/ruby:3.2.0
    steps:
      - checkout
      - ruby/install-deps
      - run:
          name: Deploy to Heroku Production
          command: |
            git push https://heroku:${HEROKU_API_KEY}@git.heroku.com/atu-pipeline.git $CIRCLE_BRANCH:main

  notify_qa:
    docker:
      - image: cimg/ruby:3.2.0
    steps:
      - run:
          name: Notify QA
          command: echo "Notify QA that a new version is available for testing."

workflows:
  version: 2

  test_and_analyze_development_branches:
    jobs:
      - automated_tests:
          filters:
            branches:
              ignore:
                - develop
                - main
      - code_analysis:
          requires:
            - automated_tests
          filters:
            branches:
              ignore:
                - develop
                - main

  deploy_staging:
    jobs:
      - automated_tests:
          filters:
            branches:
              only: develop
      - code_analysis:
          requires:
              - automated_tests
          filters:
            branches:
              only: develop
      - deploy_staging:
          requires:
              - code_analysis
          filters:
            branches:
              only: develop
      - capybara_tests:
            requires:
                - deploy_staging
            filters:
                branches:
                  only: develop
      - notify_qa:
          requires:
            - capybara_tests
          filters:
            branches:
              only: develop
      - hold_for_approval:
          type: approval
          requires:
            - notify_qa
          filters:
            branches:
              only: develop
      - create_pull_request:
          requires:
            - hold_for_approval
          filters:
            branches:
              only: develop

  deploy_production:
    jobs:
      - deploy_production:
          filters:
            branches:
              only: main
      - notify_qa:
          requires:
            - deploy_production
          filters:
            branches:
              only: main